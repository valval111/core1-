package task.oop;

public class OOP {
    public static void main(String[] args) {

    }

// Реализуйте функциональность согласно описанию

    // TODO: Создайте класс Parent(Родитель) и создайте для него 5 методов.
    //  1. Метод, принимающий 2 числа и возвращающий их сумму.
    //  2. Метод, принимающий строку, в которой передано число, и число, а возвращающий сумму в виде числа.
    //  3. Метод, принимающий строку и возвращающий ее.
    //  4. Метод, не принимающий и не возвращающий ничего, лишь выводящий на экран "I am Parent".
    //  5. Метод, возвращающий конкатенацию (сумму двух строк), принимающий 2 строки.


    // TODO: Создайте класс Child1 и переопределите все 5 методов.
    //  1. Первый метод переопределите так, что вместо суммы первый метод перемножает числа, а не складывает.
    //  2. Второй метод переопределите, чтобы получившееся число после суммирования умножалось на 2.
    //  3. Третий метод переопределите, чтобы возвращал только первую букву из строки.
    //  4. Четвертый метод выводит на экран "I am Child1".
    //  5. Пятый метод после слияния двух строк должен обрезать строку и вернуть только ее половину.


    // TODO: Создайте класс Child2 и перегрузите методы.
    //  1. Первый метод примет 3 числа и сложит их.
    //  2. Второй метод примет 3 строки, внутри которых лежат числа, и вернет их сумму.
    //  3. Третий метод примет две строки и вернет их конкатенацию.
    //  4. Четвертый метод примет аргумент строку и выведет на экран "I am Child2" + переданная строка.
    //  5. Пятый метод принимает 3 строки и возвращает их конкатенацию.


    // TODO: Создайте абстрактный класс "Фигура", в котором определены общие свойства и методы для всех геометрических фигур
    //  (например, метод для расчета площади).
    //  От него унаследуйте классы "Круг", "Прямоугольник" и "Треугольник", переопределив специфичные методы для каждой фигуры.


    // TODO: Создайте абстрактный класс "Сотрудник", в котором определены общие характеристики для всех сотрудников (например, имя, возраст).
    //  Создайте подклассы для различных типов сотрудников (например, "Менеджер", "Работник склада"),
    //  в которых можно описать специфичные методы и свойства.

}
